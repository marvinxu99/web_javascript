Prototypal Inheritance:

const array = [];
array.__proto__
array.__proto__.__proto__

************
let dragon = {
  name: 'Tanya',
  fire: true,
  fight() {
    return 5
  },
  sing() {
    return `I am ${this.name}, the breather of fire`
  }
}

dragon.sing();

let lizard = {
  name: 'Kiki',
  fight() {
    return 1
  },
}

const singLizard = dragon.sing.bind(lizard)
console.log(singLizard())

**************************************
let dragon = {
  name: 'Tanya',
  fire: true,
  fight() {
    return 5
  },
  sing() {
      if (this.fire) {
        return `I am ${this.name}, the breather of fire.`;
      } else {
          return 'I have no fire.'
      }
  }
}

let lizard = {
  name: 'Kiki',
  fire: false,
  fight() {
    return 1
  },
}

lizard.__proto__ = dragon;

//lizard.sing();

for (let prop in lizard){
    console.log(prop);
}

for (let prop in lizard){
    if(lizard.hasOwnProperty(prop)){
        console.log(prop);
    }   
}

// Do not use xxx.__proto__ = xxx syntax
*******************************************
let human = {
    mortal: true
}

let socrates = Object.create(human);
socrates.age = 70;

console.log(socrates); 
console.log(socrates.mortal); 
console.log(human.isPrototypeOf(socrates));

