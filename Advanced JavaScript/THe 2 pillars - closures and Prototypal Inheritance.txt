- Functions are objects
- Functions are first class citizens in JS
   - func can be assigned to a variable
   - function can be passed as an argument
   - function can be returned from a function

Higher order functions (HOF)
 - A higher order function is a function that takes a function as an argument, 
   or returns a function. Higher order function is in contrast to first 
   order functions, which don't take a function as an argument or return a function as output.

function multiplyBy(num1) {
   return function(num2) {
      return num1 * num2;
   }
}

const multiplyByTwo = multiplyBy(2);
const multiplyByTen = multiplyBy(10);

multiplyByTwo(4);

***********************************************************
const multiplyBy = (num1) => (num2) => num1 * num2;

const multiplyByTwo = multiplyBy(2);
const multiplyByTen = multiplyBy(10);

multiplyByTwo(4);

******************************
Lexical scope: Lexical scope means that in a nested group of functions, the inner functions 
have access to the variables and other resources of their parent scope. This means that 
the child's functions are lexically bound to the execution context of their parents. 
Lexical scope is sometimes also referred to as static scope.

Closure benefits:
(1) Memeory effiient

function heavyDuty = (index) => {
   const bigArray = new Array(70000).fill('mm');
   return bigArray[index];
}

heavyDuty(688);
heavyDuty(689);
heavyDuty(700);
-------------------------
const getHeavyDuty() = heavyDuty2()
getHeavyDuty(688);
getHeavyDuty(689);
getHeavyDuty(700);

function heavyDuty2() {
   const bigArray = new Array(70000).fill('mm');
   return function (index) {
	return bigArray[index];
   }
}


(2) encapsulation

let view;
function initialize() {
   let called = 0;

   return function() {
      if called > 0 {
         return ;
      } else {
	view = "vv";
        called++;
        console.log('view has been set');
      }
}

const startOnce = initialize();
startOnce();



