https://www.freecodecamp.org/news/javascript-timers-everything-you-need-to-know-5f31eaa37162/

In browsers, the main timer functions are part of the Window interface, which has a few other functions and objects. That interface makes all of its elements available globally in the main JavaScript scope. This is why you can execute setTimeout directly in your browser’s console.

In Node, timers are part of the global object, which behaves similarly to the browser’s Window interface. You can see the source code of timers in Node.

(1) Delaying the execution of a function
Timer functions are higher-order functions that can be used to delay or repeat the execution of other functions (which they receive as their first argument).

// example1.js
setTimeout(
  () => {
    console.log('Hello after 4 seconds');
  },
  4 * 1000
);

const func = () => {
  console.log('Hello after 4 seconds');
};
setTimeout(func, 4 * 1000);

(2) Passing Arguments
If the function that uses setTimeout to delay its execution accepts any arguments, we can use the remaining arguments for setTimeout itself (after the 2 we learned about so far) to relay the argument values to the delayed function.

// For: func(arg1, arg2, arg3, ...)
// We can use: setTimeout(func, delay, arg1, arg2, arg3, ...)
Here’s an example:

// example2.js
const rocks = who => {
  console.log(who + ' rocks');
};
setTimeout(rocks, 2 * 1000, 'Node.js');

The rocks function above, which is delayed by 2 seconds, accepts a who argument and the setTimeout call relays the value “Node.js” as that who argument.

Executing example2.js with the node command will print out “Node.js rocks” after 2 seconds.

(3) Constraints:
You can define only a single function in your solution, which includes inline functions. This means many setTimeout calls will have to use the exact same function.


(4) Challenge:
print the following 2 messages after their corresponding delays.

Print the message “Hello after 4 seconds” after 4 seconds
Print the message “Hello after 8 seconds” after 8 seconds.

// solution1.js
const theOneFunc = delay => {
  console.log('Hello after ' + delay + ' seconds');
};
setTimeout(theOneFunc, 4 * 1000, 4);
setTimeout(theOneFunc, 8 * 1000, 8);

(5) Repeating the execution of a function

// example3.js
setInterval(
  () => console.log('Hello every 3 seconds'),
  3000
);

(6) Cancelling Timers
A call to setTimeout returns a timer “ID” and you can use that timer ID with a clearTimeout call to cancel that timer. Here’s an example:

// example4.js
const timerId = setTimeout(
  () => console.log('You will not see this one!'),
  0
);
clearTimeout(timerId);
This simple timer is supposed to fire after 0 ms (making it immediate), but it will not because we are capturing the timerId value and canceling it right after with a clearTimeout call.

(7) Challenge
Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.

let counter = 0;
const intervalId = setInterval(() => {
  console.log('Hello World');
  counter += 1;
if (counter === 5) {
    console.log('Done');
    clearInterval(intervalId);
  }
}, 1000);

